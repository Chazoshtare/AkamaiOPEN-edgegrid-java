package com.akamai.testing.edgegrid.core;

import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Multimap;

import java.net.URI;
import java.util.Arrays;
import java.util.Comparator;
import org.apache.commons.lang3.Validate;
import org.apache.commons.lang3.builder.Builder;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;


/**
 * HTTP Request agnostic to any HTTP client implementation.
 *
 * @author mgawinec@akamai.com
 * @author mmeyer@akamai.com
 */
public class Request implements Comparator<Request>, Comparable<Request> {

    private final byte[] body;
    private final String method;
    private final URI uriWithQuery;
    private final Multimap<String, String> headers;

    private Request(RequestBuilder b) {
        this.body = b.body;
        this.headers = b.headers;
        this.method = b.method;
        this.uriWithQuery = b.uriWithQuery;
    }

    /**
     * Returns a new builder. The returned builder is equivalent to the builder
     * generated by {@link RequestBuilder}.
     *
     * @return a fresh {@link RequestBuilder}
     */
    public static RequestBuilder builder() {
        return new RequestBuilder();
    }

    @Override
    public int compare(Request o1, Request o2) {
        return new CompareToBuilder()
                .append(o1.body, o2.body)
                .append(o1.headers, o2.headers)
                .append(o1.method, o2.method)
                .append(o1.uriWithQuery, o2.uriWithQuery)
                .build();
    }

    @Override
    public int compareTo(Request that) {
        return compare(this, that);
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        if (getClass() != o.getClass()) return false;
        final Request that = (Request) o;
        return compareTo(that) == 0;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this, ToStringStyle.JSON_STYLE)
                .append("body", body)
                .append("headers", headers)
                .append("method", method)
                .append("uriWithQuery", uriWithQuery)
                .build();
    }

    byte[] getBody() {
        return Arrays.copyOf(body, body.length);
    }

    Multimap<String, String> getHeaders() {
        return headers;
    }

    String getMethod() {
        return method;
    }

    URI getUriWithQuery() {
        return uriWithQuery;
    }

    /**
     * Creates a new builder. The returned builder is equivalent to the builder
     * generated by {@link Request#builder()}.
     */
    public static class RequestBuilder implements Builder<Request> {

        private String method;
        private URI uriWithQuery;
        private Multimap<String, String> headers = ImmutableMultimap.of();
        private byte[] body = new byte[]{};

        /**
         * Sets a content of HTTP request body. If not set, body is empty by default.
         *
         * @param requestBody a request body, in bytes
         * @return reference back to this builder instance
         */
        public RequestBuilder body(byte[] requestBody) {
            Validate.notNull(body, "body cannot be blank");
            this.body = Arrays.copyOf(requestBody, requestBody.length);
            return this;
        }

        /**
         * Sets headers of HTTP request. If not set, headers list is empty by default
         *
         * @param headers a {@link Multimap} of headers
         * @return reference back to this builder instance
         */
        public RequestBuilder headers(Multimap<String, String> headers) {
            Validate.notNull(headers, "headers cannot be null");
            this.headers = ImmutableMultimap.copyOf(headers);
            return this;
        }

        /**
         * Sets HTTP method: GET, PUT, POST, DELETE. Mandatory to set.
         *
         * @param method an HTTP method
         * @return reference back to this builder instance
         */
        public RequestBuilder method(String method) {
            Validate.notBlank(method, "method cannot be blank");
            this.method = method;
            return this;
        }

        /**
         * Sets absolute URI of HTTP request including query string. Mandatory to set.
         *
         * @param uriWithQuery a {@link URI}
         * @return reference back to this builder instance
         */
        public RequestBuilder uriWithQuery(URI uriWithQuery) {
            Validate.notNull(uriWithQuery, "uriWithQuery cannot be blank");
            this.uriWithQuery = uriWithQuery;
            return this;
        }

        /**
         * Returns a newly-created immutable HTTP request.
         */
        @Override
        public Request build() {
            Validate.notNull(body, "body cannot be blank");
            Validate.notBlank(method, "method cannot be blank");
            Validate.notNull(uriWithQuery, "uriWithQuery cannot be blank");
            return new Request(this);
        }

    }

}
