/*
 * Copyright 2016 Copyright 2016 Akamai Technologies, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.akamai.testing.edgegrid.core;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Client credential used to sign a request.
 *
 * @author mgawinec@akamai.com
 */
public class ClientCredential {

    private String clientToken;
    private String accessToken;
    private String clientSecret;

    ClientCredential(Builder b) {
        this.clientToken = checkNotNull(b.clientToken);
        this.accessToken = checkNotNull(b.accessToken);
        this.clientSecret = checkNotNull(b.clientSecret);
    }

    /**
     * Returns a new builder. The returned builder is equivalent to the builder
     * generated by {@link Builder}.
     */
    public static Builder builder() {
        return new Builder();
    }

    String getClientToken() {
        return clientToken;
    }

    String getAccessToken() {
        return accessToken;
    }

    String getClientSecret() {
        return clientSecret;
    }

    public boolean equals(Object o) {
        if(o == this) {
            return true;
        } else if(!(o instanceof ClientCredential)) {
            return false;
        } else {
            ClientCredential other;
            label44: {
                other = (ClientCredential)o;
                String this$clientToken = this.getClientToken();
                String other$clientToken = other.getClientToken();
                if(this$clientToken == null) {
                    if(other$clientToken == null) {
                        break label44;
                    }
                } else if(this$clientToken.equals(other$clientToken)) {
                    break label44;
                }

                return false;
            }

            String this$accessToken = this.getAccessToken();
            String other$accessToken = other.getAccessToken();
            if(this$accessToken == null) {
                if(other$accessToken != null) {
                    return false;
                }
            } else if(!this$accessToken.equals(other$accessToken)) {
                return false;
            }

            String this$clientSecret = this.getClientSecret();
            String other$clientSecret = other.getClientSecret();
            if(this$clientSecret == null) {
                if(other$clientSecret != null) {
                    return false;
                }
            } else if(!this$clientSecret.equals(other$clientSecret)) {
                return false;
            }

            return true;
        }
    }

    public int hashCode() {
        boolean PRIME = true;
        byte result = 1;
        String $clientToken = this.getClientToken();
        int result1 = result * 59 + ($clientToken == null?43:$clientToken.hashCode());
        String $accessToken = this.getAccessToken();
        result1 = result1 * 59 + ($accessToken == null?43:$accessToken.hashCode());
        String $clientSecret = this.getClientSecret();
        result1 = result1 * 59 + ($clientSecret == null?43:$clientSecret.hashCode());
        return result1;
    }

    public String toString() {
        return "ClientCredential(clientToken=" + this.getClientToken() + ", accessToken=" + this.getAccessToken() + ", clientSecret=" + this.getClientSecret() + ")";
    }

    public static class Builder {
        private String clientToken;
        private String accessToken;
        private String clientSecret;

        /**
         * Creates a new builder. The returned builder is equivalent to the builder
         * generated by {@link ClientCredential#builder}.
         */
        public Builder() {
        }

        /**
         * Sets a token representing an OPEN API service client.
         */
        public Builder clientToken(String clientToken) {
            this.clientToken = checkNotNull(clientToken);
            return this;
        }


        /**
         * Sets a secret associated with a client token.
         */
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = checkNotNull(clientSecret);
            return this;
        }

        /**
         * Sets an access token representing authorizations a client has for OPEN API service.
         */
        public Builder accessToken(String accessToken) {
            this.accessToken = checkNotNull(accessToken);
            return this;
        }

        /**
         * Returns a newly-created immutable client credential.
         */
        public ClientCredential build() {
            return new ClientCredential(this);
        }


    }
}